-- beanpaper: a cursed hyprpaper config generator
--
-- Copyright (c) Eason Qin <eason@ezntek.com>, 2025.
--
-- This source code form is licensed under the MIT/Expat license. Visit the
-- root of the project directory for details, or find a digital copy on the OSI
-- website.

local M = {}

---@class Monitor
---@field [1] string (output)
---@field [2] string (path)
---@field contain? boolean
---@field tile? boolean

---@class Config
---@field monitors Monitor[]
---@field prefix? string
---@field ipc? boolean
---@field splash? boolean

---Generates a string configuration for a monitor table.
---@param mon Monitor
---@param prefix? string
---@return table
local function generate_monitor(mon, prefix)
    local contain = mon.contain or false
    local tile = mon.tile or false

    local output = {}

    if contain and tile then
        io.stderr:write("WARN: cannot have both contain and tile for monitor. defaulting to cover" .. mon[1])
    end

    if contain then
        table.insert(output, "contain:")
    end

    if tile then
        table.insert(output, "tile:")
    end

    local path = mon[2]

    if prefix ~= nil then
        path = prefix .. "/" .. path
    end
    table.insert(output, path)

    local line = string.format("wallpaper = %s,%s", mon[1], table.concat(output, ""))
    return { line, path }
end

---Generates a string configuration for a whole config.
---@param cfg Config
function M.Generate(cfg)
    local wallpapers = {}
    local preload = {}

    local ipc = true
    if cfg.ipc ~= nil then
        ipc = cfg.ipc
    end

    local splash = false
    if cfg.splash ~= nil then
        splash = cfg.splash
    end

    -- monitors
    for _, v in pairs(cfg.monitors) do
        local mon = generate_monitor(v, cfg.prefix)
        table.insert(wallpapers, mon[1])
        preload[mon[2]] = 1
    end

    -- file generation bs
    local header = [[
# ===== GENERATED BY HPG =====
# visit https://github.com/ezntek/beanpaper for details.
# ============================
#
]]

    local res = header
    res = res .. "ipc = " .. tostring(ipc) .. "\n"
    res = res .. "splash = " .. tostring(splash) .. "\n"

    for k, _ in pairs(preload) do
        local line = "preload = " .. k .. "\n"
        res = res .. line
    end

    for _, v in pairs(wallpapers) do
        res = res .. v .. "\n"
    end

    return res
end

---Writes a cfg table to disk, at $HOME/hypr/hyprpaper.conf
---@param cfg Config
function M.Write(cfg)
    local cfgpath = os.getenv("XDG_CONFIG_HOME")
    if cfgpath == nil then
        local home = os.getenv("HOME")
        if home == nil then
            io.stderr:write("ERROR: $HOME does not exist.")
            os.exit(1)
        end

        cfgpath = home .. "/.config"
    end

    local path = string.format("%s/hypr/hyprpaper.conf", cfgpath)
    os.execute(string.format("mkdir -p %s/hypr", cfgpath))
    local fp, errmsg = io.open(path, "w")
    if fp == nil then
        io.stderr:write(string.format("ERROR: failed to open file (%s)", errmsg))
        os.exit(1)
    end

    local s = M.Generate(cfg)
    fp:write(s)

    fp:close()
end

function M.Apply(cfg)
    M.Write(cfg)
    os.execute("pkill hyprpaper")
    os.execute("nohup hyprpaper > /dev/null 2>&1 &")
end

return M
